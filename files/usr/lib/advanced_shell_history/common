#!/bin/bash
#
#   Copyright 2011 Carl Anderson
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
#
# This file is intended to be common shell code for both zsh and bash.
#

# Source the config files to set all ASH_ shell variables.
source <( grep "^[ ]*ASH_[^A-Za-z_]*='.*'.*$" \
  /etc/ash/ash.conf \
  /etc/ash/ash_log.conf \
  /etc/ash/ash_query.conf \
) || exit 1
#
# Note: the different config files are listed in a set order to force grep to
#       read the more general options first.  This allows ash_*.conf to
#       override values in ash.conf


# Put the history.db in HOME or use ${TMPDIR} if no HOME exists.
if [[ -d "${HOME}" ]]; then
  export ASH_HISTORY_DB="${HOME}/.history.db"
else
  export ASH_HISTORY_DB=${TMPDIR}/.history_${UID}.db
fi
readonly ASH_HISTORY_DB


# Ensure there is a HISTFILE.
if [[ -z "${HISTFILE}" ]]; then
  export HISTFILE="${ASH_HISTORY_DB%.db}"
  ash_log -a "WARN: HISTFILE undefined. Exporting HISTFILE as: '${HISTFILE}'."
fi
if [[ ! -e "${HISTFILE}" ]] && ! touch "${HISTFILE}" &>/dev/null; then
  ash_log -a "Failed to create shell history file: '${HISTFILE}'."
fi
if ! chmod u+rw "${HISTFILE}" &>/dev/null; then
  ash_log -a "Failed to make shell history file readable and writeable."
fi


##
# This is invoked when a user session is exited.
#
# Args:
#   rval: The numeric exit code from the last user-entered command.
#
function ash::end_session() {
  ash::log "${@}"
  ash_log --end_session --exit ${1}
}

# This is executed when the user types 'exit'
trap 'ash::end_session ${?} ${PIPESTATUS[@]} ${pipestatus[@]}' EXIT TERM

# This avoids logging duplicate commands when the user presses Ctrl-C while
# entering a command.
trap 'ASH_SKIP=/bin/true' INT
export ASH_SKIP=/bin/false


##
# This is invoked immediately before each new prompt is displayed for the user.
#
# Args:
#   rval: The numeric exit code from the last user-entered command.
#   pipes: The set of pipe exit codes (one or more codes).
#
function ash::log() {
  if ${ASH_SKIP}; then
    ASH_SKIP=/bin/false
    return
  fi

  local no start end cmd rval="${1}" && shift
  read -r no start end cmd <<< "$( ash::last_command )"
  ash_log -e ${rval} -s ${start} -f ${end} -n ${no} -p "${@}" -c "${cmd}"
}


# Protect the functions.
readonly -f ash::end_session
readonly -f ash::log

export -f ash::end_session
export -f ash::log
